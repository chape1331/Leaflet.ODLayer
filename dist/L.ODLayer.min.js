/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/L.ODLayer.js":
/*!**************************!*\
  !*** ./src/L.ODLayer.js ***!
  \**************************/
/***/ ((module) => {

eval("/**\r\n * class L.ODLayer()\r\n * \r\n * (extends L.GeoJSON)\r\n * \r\n * <DESCRIPTION>\r\n * \r\n */\r\n\r\nL.ODLayer = L.GeoJSON.extend({\r\n    options: {\r\n        data: null,\r\n        mode: 1, \r\n        attributes: {},\r\n        pointStyle: {},\r\n        lineStyle: {},\r\n    },\r\n\r\n    // variables for plugin scope\r\n    _defaultAttributes: {\r\n        id: \"id\",\r\n        value: \"value\"\r\n    },\r\n    _defaultPointStyle: {\r\n        radius: 8,\r\n        fillColor: \"#1f78b4\",\r\n        fillColorSelected: [\"red\"], \r\n        color: \"black\",\r\n        weight: 2,\r\n        opacity: 1.0,\r\n        fillOpacity: 1.0,\r\n    },\r\n    _defaultLineStyle: { \r\n        color: \"lightblue\",\r\n        colorSelected: \"red\",\r\n        weight: 2,\r\n        opacity: 0,\r\n        opacitySelected: 0.6,\r\n        sizeFactor: 1,\r\n    },\r\n    _selectedIds: [],\r\n\r\n    // functions\r\n    initialize: function(features, options){\r\n        this._validateStyles();\r\n        this._validateAttributes();\r\n        options[\"pointToLayer\"] = function(features, latlng) {\r\n            return L.circleMarker(latlng)             \r\n        };\r\n        L.GeoJSON.prototype.initialize.call(this, features, options);\r\n\r\n        this.createODlinks();\r\n    },\r\n\r\n    createODlinks: function(){\r\n        let attributes = this.options.attributes;\r\n        let lines = [];\r\n\r\n        let layers = this._layers;\r\n        for (let i in layers) {\r\n            let oLayer = layers[i];\r\n            let oId = oLayer.feature.properties[attributes.id];\r\n            let oCoords = oLayer.feature.geometry.coordinates.slice();\r\n\r\n            for (let j in layers){\r\n                if (i != j) {\r\n                    let dLayer = layers[j];\r\n                    let dId = dLayer.feature.properties[attributes.id];\r\n                    let dCoords = dLayer.feature.geometry.coordinates.slice();\r\n                    \r\n                    let link = [[oCoords[1], oCoords[0]], [dCoords[1], dCoords[0]]];\r\n                    link = L.polyline(link, {\r\n                        interactive: false,\r\n                    });\r\n                    link[\"properties\"] = {\r\n                        \"from\": oId,\r\n                        \"to\": dId,\r\n                    };\r\n                    lines.push(link);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i in lines) {\r\n            lines[i].addTo(this);\r\n        }\r\n    },\r\n\r\n    onAdd: function(map) {\r\n        L.GeoJSON.prototype.onAdd.call(this, map);\r\n        this.setStyle();\r\n    },\r\n\r\n    setStyle: function () {\r\n        this._validateAttributes();\r\n        this._validateStyles();\r\n\r\n        let options = this.options;\r\n        let data = this.options.data;\r\n        let attributes = this.options.attributes;\r\n        let pointStyle = this.options.pointStyle;\r\n        let lineStyle = this.options.lineStyle;\r\n\r\n        let layers = this._layers;\r\n        for (let key in layers){ \r\n            let layer = layers[key];\r\n\r\n            if (layer instanceof L.CircleMarker) {\r\n                let id = layer.feature.properties[attributes.id];\r\n                let style = Object.assign({}, pointStyle);\r\n                let index = this._selectedIds.indexOf(id); \r\n                if (index != -1) {                    \r\n                    index = index % style.fillColorSelected.length;\r\n                    let fillColor = style.fillColorSelected[index];\r\n                    style.fillColor = fillColor;\r\n                    style.radius = style.radius * 2;\r\n                    layer.bringToFront();\r\n                }\r\n                layer.setStyle(style);\r\n            } else if (layer instanceof L.Polyline) {\r\n                let from = layer.properties.from;\r\n                let to = layer.properties.to;\r\n                let id = from + \"-\" + to;\r\n                let style = Object.assign({}, lineStyle);\r\n\r\n                if ((options.mode == 1 && this._selectedIds.indexOf(from) == -1) || \r\n                    (options.mode == 2 && this._selectedIds.index(to) == -1)) {\r\n                        style.opacity = style.opacity;\r\n                } else {\r\n                    style.opacity = lineStyle.opacitySelected;\r\n                    style.color = lineStyle.colorSelected;\r\n                    style.weight = data[id][attributes.value] * style.sizeFactor;\r\n                    layer.bringToFront();\r\n                }\r\n\r\n                layer.setStyle(style);\r\n            } \r\n        }\r\n    },\r\n\r\n    _validateAttributes: function() {\r\n        let attributes = this.options.attributes;\r\n        if (attributes == null | attributes == undefined) attributes = Object.assign({}, this._defaultAttributes);\r\n        else {\r\n            for (key in this._defaultAttributes){\r\n                if (!(key in attributes)) attributes[key] = this._defaultAttributes[key];\r\n            }\r\n        }\r\n    },\r\n\r\n    _validateStyles: function() {\r\n        // Point style\r\n        let style = this.options.pointStyle;\r\n        if (typeof(style.fillColorSelected) == \"string\") style.fillColorSelected = [style.fillColorSelected]\r\n\r\n        if (style == null | style == undefined) style = Object.assign({}, this._defaultPointStyle);\r\n        else {\r\n            for (key in this._defaultPointStyle){\r\n                if (!(key in style)) style[key] = this._defaultPointStyle[key];\r\n            }\r\n        }\r\n\r\n        // Line style\r\n        style = this.options.lineStyle;\r\n        if (style == null | style == undefined) style = Object.assign({}, this._defaultLineStyle);\r\n        else {\r\n            for (key in this._defaultLineStyle){\r\n                if (!(key in style)) style[key] = this._defaultLineStyle[key];\r\n            }\r\n        }\r\n    },\r\n\r\n    updateData: function(data){\r\n        this.options.data = data;\r\n        this.setStyle();\r\n    },\r\n\r\n    updatePointStyle: function(style){\r\n        this.options.pointStyle = style;\r\n        this.setStyle();\r\n    },\r\n\r\n    updateLineStyle: function(style){\r\n        this.options.lineStyle = style;\r\n        this.setStyle();\r\n    },\r\n\r\n    updateAttributes: function(attributes){\r\n        this.options.attributes = attributes;\r\n        this.setStyle();\r\n    },\r\n\r\n    selectFeature: function(id, clear=false) {\r\n        if (clear) this.clearSelection();\r\n        if (this._selectedIds.indexOf(id) == -1) {this._selectedIds.push(id)};\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    unselectFeature: function(id) {\r\n        const index = this._selectedIds.indexOf(id);\r\n        if (index == -1) this._selectedIds.splice(index, 1);\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    clearSelection: function() {\r\n        delete(this._selectedIds);\r\n        this._selectedIds = [];\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    getSelected: function() {\r\n        let selection = {};\r\n        let style = this.options.pointStyle;\r\n\r\n        for (i in this._selectedIds) {\r\n            let item = this._selectedIds[i];\r\n            let index = this._selectedIds.indexOf(item);\r\n            index = index % style.fillColorSelected.length;\r\n            selection[item] = style.fillColorSelected[index]; \r\n        }\r\n\r\n        return selection;\r\n    }\r\n});\r\n\r\nL.odLayer = function (geojson, options) {\r\n    return new L.ODLayer(geojson, options);\r\n}\r\n\r\nmodule.exports = L.odLayer;\n\n//# sourceURL=webpack://leaflet.odlayer/./src/L.ODLayer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/L.ODLayer.js");
/******/ 	
/******/ })()
;